PREFIX act: <http://ontology.eil.utoronto.ca/tove/activity#>
PREFIX adms: <http://www.w3.org/ns/adms#>
PREFIX cc: <http://creativecommons.org/ns#>
PREFIX cids: <https://ontology.commonapproach.org/cids#>
PREFIX csh: <https://ontology.commonapproach.org/cids/shacl#>
PREFIX cwrc: <http://sparql.cwrc.ca/ontologies/cwrc#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX dcat: <http://www.w3.org/ns/dcat#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX dqv: <http://www.w3.org/ns/dqv#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX genprop: <https://standards.iso.org/iso-iec/5087/-1/ed-1/en/ontology/GenericProperties/>
PREFIX geo: <http://www.geonames.org/ontology/ontology_v3.1.rdf#>
PREFIX i72: <http://ontology.eil.utoronto.ca/ISO21972/iso21972#>
PREFIX ic: <http://ontology.eil.utoronto.ca/tove/icontact#>
PREFIX oep: <http://www.w3.org/2001/sw/BestPractices/OEP/SimplePartWhole/part.owl#>
PREFIX om-1: <http://www.wurvoc.org/vocabularies/om-1.8/>
PREFIX org: <http://ontology.eil.utoronto.ca/tove/organization#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rel: <http://purl.org/vocab/relationship/>
PREFIX schema: <http://schema.org/>
PREFIX sff: <https://ontology.commonapproach.org/sff#>
PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX sur: <http://ontology.eil.utoronto.ca/tove/survey#>
PREFIX time: <http://www.w3.org/2006/time#>
PREFIX vann: <http://purl.org/vocab/vann/>
PREFIX voaf: <http://purl.org/vocommons/voaf#>
PREFIX void: <http://rdfs.org/ns/void#>
PREFIX vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#>
PREFIX xml: <http://www.w3.org/XML/1998/namespace>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

CONSTRUCT {
    # 1. Node Shapes from Classes
    ?class rdfs:subClassOf ?superClass .
    ?shape a sh:NodeShape ;
        sh:targetClass ?class ;
        rdfs:label ?label;
        sh:closed false ;
        sh:property ?propertyShape ;
        csh:activeTier ?tierMarker ;
    .
    ?propertyShape a sh:PropertyShape ;
        sh:path ?property ;
        sh:name ?propertyLocalName ;
        sh:class ?rangeClass ;
        sh:nodeKind ?nodeKind ;
        sh:datatype ?datatype ;
        csh:in ?inList ;
        sh:minCount ?minCardinality ;
        sh:maxCount ?maxCardinality ;
        csh:cardinality ?cardinality ;
        csh:usedBy ?class ;
        sh:message ?message ;
        sh:severity ?severity ;    
        csh:activeTier ?tierMarker ;
    .
    ?namedIndividual a ?facetClass ;
        rdfs:label ?prefLabel;
        cids:hasIdentifier ?identifier ;
        csh:memberOf ?primaryFacetClass ;
    .
}
WHERE {
    {
        # PART 1: All CIDS classes (both with and without tier annotations)
        ?class rdf:type owl:Class .
        
        # Only include CIDS namespace classes
        FILTER(STRSTARTS(str(?class), str(cids:)))
        
        bind(str(replace(str(?class),".*/([A-Za-z0-9]+)$|.*#([A-Za-z0-9]+)$","$1$2")) as ?className)
        FILTER(isIRI(?class))
        bind(concat(?className,"_NodeShape") as ?shapeName)
        BIND(IRI(concat(str(csh:),?shapeName)) AS ?shape)
        OPTIONAL { ?class rdfs:label ?label . }
        OPTIONAL { ?class rdfs:comment ?comment . }
        OPTIONAL {
            ?class rdfs:subClassOf+ ?superClass .
            FILTER(isIRI(?superClass))
        }
        
        # Process ALL restrictions (with or without tier annotations)
        bind(str(replace(str(?class),".*/([A-Za-z0-9]+)$|.*#([A-Za-z0-9]+)$","$1$2")) as ?className1)
        ?class rdfs:subClassOf+ ?restriction .
        ?restriction owl:onProperty ?property .
        
        # Capture tier annotation if it exists, otherwise mark as "Complete"
        OPTIONAL {
            ?restriction cids:belongsToTier ?explicitTier .
        }
        BIND(COALESCE(?explicitTier, csh:CompleteTier) as ?tierMarker)
        
        # Capture sh:severity and sh:message from the restriction
        optional {
            ?restriction sh:message ?message .
        }
        optional {
            ?restriction sh:severity ?severity .
        }        
        
        bind(str(replace(str(?property),".*/([A-Za-z0-9]+)$|.*#([A-Za-z0-9]+)$","$1$2")) as ?propertyLocalName)
        bind(iri(concat(str(csh:),?className1,"_",?propertyLocalName,"_PropertyShape")) as ?propertyShape)
        
        # Determine if this is a data property or object property
        {
            # DATA PROPERTIES: Handle onDataRange restrictions  
            ?restriction owl:onDataRange ?dataTarget.
            bind(?dataTarget as ?datatype)
            bind(sh:Literal as ?nodeKind)
            
            # Handle enumerated values in onDataRange
            optional {
                ?dataTarget owl:oneOf ?rangeTarget.
                ?rangeTarget rdf:rest*/rdf:first ?inList .
            }
        } UNION {
            # DATA PROPERTIES: Handle allValuesFrom with XSD datatypes
            ?restriction owl:allValuesFrom|owl:someValuesFrom ?datatype2.
            filter(STRBEFORE(str(?datatype2), "#") = str(xsd:)) .
            bind(?datatype2 as ?datatype)
            bind(sh:Literal as ?nodeKind)
        } UNION {
            # DATA PROPERTIES: Handle hasValue restrictions
            ?restriction owl:hasValue ?value .
            bind(sh:Literal as ?nodeKind)
        } UNION {
            # OBJECT PROPERTIES: Handle onClass restrictions
            ?restriction owl:onClass ?rangeClass.
            bind(sh:IRI as ?nodeKind)
        } UNION {
            # OBJECT PROPERTIES: Handle allValuesFrom with class ranges
            ?restriction owl:allValuesFrom|owl:someValuesFrom ?rangeClass2.
            filter(STRBEFORE(str(?rangeClass2), "#") != str(xsd:)) .
            bind(?rangeClass2 as ?rangeClass)
            bind(sh:IRI as ?nodeKind)
        }
        
        # Extract cardinality constraints
        bind(0 as ?void)
        optional {
            ?restriction owl:qualifiedCardinality ?qCardinality .
            bind(xsd:string(?qCardinality) as ?cardinalityMin1)
            bind(xsd:string(?qCardinality) as ?cardinalityMax1)
        }
        optional {
            ?restriction owl:minQualifiedCardinality ?cardinalityMin2 .
        }
        optional {
            ?restriction owl:maxQualifiedCardinality ?cardinalityMax2 .
        }
        optional {
            ?restriction owl:cardinality ?cardinality0 .
            bind(xsd:string(?cardinality0) as ?cardinalityMin3)
            bind(xsd:string(?cardinality0) as ?cardinalityMax3)
        }
        optional {
            ?restriction owl:minCardinality ?cardinalityMin4 .
        }
        optional {
            ?restriction owl:maxCardinality ?cardinalityMax4 .
        }
        
        bind(coalesce(xsd:string(?cardinalityMin1), xsd:string(?cardinalityMin2), xsd:string(?cardinalityMin3), xsd:string(?cardinalityMin4), "0") as ?cardinalityMin)
        bind(coalesce(xsd:string(?cardinalityMax1), xsd:string(?cardinalityMax2), xsd:string(?cardinalityMax3), xsd:string(?cardinalityMax4), "unbounded") as ?cardinalityMax)
        bind(if(?cardinalityMin = "0" && ?cardinalityMax = "unbounded",csh:ZeroOrMore,
            if(?cardinalityMin = "1" && ?cardinalityMax = "1",csh:ExactlyOne,
            if(?cardinalityMin = "1" && ?cardinalityMax = "unbounded",csh:OneOrMore,
            if(?cardinalityMin = "0" && ?cardinalityMax = "1",csh:Optional, csh:Unknown) ) )      
            ) as ?cardinality )
        bind(if(?cardinalityMax = "unbounded", ?void, xsd:integer(?cardinalityMax)) as ?maxCardinality)
        bind(xsd:integer(?cardinalityMin) as ?minCardinality)
        
        # This determines enumerations - for all individuals in CIDS namespace
        optional {
            ?namedIndividual a ?niClass .
            ?namedIndividual a owl:NamedIndividual .
            FILTER(STRSTARTS(str(?namedIndividual), str(cids:)))
            bind(str(replace(str(?namedIndividual),".*/([A-Za-z0-9]+)$|.*#([A-Za-z0-9]+)$","$1$2")) as ?namedIndividualName)
            optional {
                ?namedIndividual skos:prefLabel ?prefLabel .
            }
        }
    } UNION {
        # PART 2: All enumerations, concepts, and codes in CIDS namespace
        ?namedIndividual a ?facetClass .
        FILTER(STRSTARTS(str(?namedIndividual), str(cids:)))
        
        {
            ?namedIndividual a owl:NamedIndividual .
        } UNION {
            ?namedIndividual a skos:Concept .   
        } UNION {
            ?namedIndividual a cids:Code .
        }
        OPTIONAL {
            ?namedIndividual rdfs:label ?prefLabel1;
        }
        optional {
            ?namedIndividual skos:prefLabel ?prefLabel2 ;
        }
        bind(coalesce(?prefLabel1, ?prefLabel2) as ?prefLabel)
        optional {
            ?namedIndividual cids:hasIdentifier ?identifier .
        }
        optional {
            ?namedIndividual a ?facetClass .
            filter(?facetClass not in (owl:NamedIndividual, skos:Concept, cids:Code))
            bind(?facetClass as ?primaryFacetClass)
        }
    }    
} 
ORDER BY ?shape ?propertyShape ?namedIndividual ?namedIndividualName